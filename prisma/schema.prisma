generator client {
  provider = "prisma-client-js"
  //output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  name      String
  username  String      @unique
  email     String      @unique
  password  String
  bio       String?
  avatar    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ratings   Rating[]
  reviews   Review[]
  watchlist Watchlist[]
}

model Movie {
  id        Int          @id @default(autoincrement())
  title     String
  year      Int
  plot      String?
  poster    String?
  country   String       @default("Ethiopia")
  language  String       @default("Amharic")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  genres    MovieGenre[]
  ratings   Rating[]
  reviews   Review[]
  watchlist Watchlist[]
}

model Review {
  id               Int      @id @default(autoincrement())
  content          String
  rating           Float?
  containsSpoilers Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  authorId         Int
  movieId          Int
  author           User     @relation(fields: [authorId], references: [id])
  movie            Movie    @relation(fields: [movieId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  score     Float
  createdAt DateTime @default(now())
  userId    Int
  movieId   Int
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, movieId])
}

model Watchlist {
  id        Int         @id @default(autoincrement())
  status    WatchStatus @default(PLAN_TO_WATCH)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userId    Int
  movieId   Int
  movie     Movie       @relation(fields: [movieId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@unique([userId, movieId])
}

model Genre {
  id     Int          @id @default(autoincrement())
  name   String       @unique
  movies MovieGenre[]
}

model MovieGenre {
  movieId Int
  genreId Int
  genre   Genre @relation(fields: [genreId], references: [id])
  movie   Movie @relation(fields: [movieId], references: [id])

  @@id([movieId, genreId])
}

enum WatchStatus {
  PLAN_TO_WATCH
  WATCHING
  WATCHED
}
