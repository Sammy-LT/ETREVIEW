// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




enum WatchStatus {
  PLAN_TO_WATCH
  WATCHING
  WATCHED
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  username  String   @unique
  email     String   @unique
  password  String
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  ratings   Rating[]
  watchlist Watchlist[]
}

model Movie {
  id        Int      @id @default(autoincrement())
  title     String
  year      Int
  plot      String?
  poster    String?
  country   String   @default("Ethiopia")
  language  String   @default("Amharic")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  ratings   Rating[]
  watchlist Watchlist[]
  genres    MovieGenre[]
}

model Review {
  id               Int      @id @default(autoincrement())
  content          String
  rating           Float?   // optional, if user wants to give a rating with review
  containsSpoilers Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  author   User  @relation(fields: [authorId], references: [id])
  authorId Int
  movie    Movie @relation(fields: [movieId], references: [id])
  movieId  Int
}

model Rating {
  id        Int      @id @default(autoincrement())
  score     Float    // e.g., 0.5 to 5.0
  createdAt DateTime @default(now())

  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([userId, movieId])  // user can rate a movie once
}

model Watchlist {
  id        Int         @id @default(autoincrement())
  status    WatchStatus @default(PLAN_TO_WATCH)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int

  @@unique([userId, movieId])
}

model Genre {
  id    Int    @id @default(autoincrement())
  name  String @unique

  movies MovieGenre[]
}

model MovieGenre {
  movie   Movie @relation(fields: [movieId], references: [id])
  movieId Int
  genre   Genre @relation(fields: [genreId], references: [id])
  genreId Int

  @@id([movieId, genreId])
}
